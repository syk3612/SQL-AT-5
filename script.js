// script.js
const langNames = { mr: "MARATHI", hi: "HINDI", en: "ENGLISH" };

/* -------------------------
   Helpers
   ------------------------- */
function makeTable(headers, rows) {
  let html = '<table class="sql-output"><thead><tr>';
  headers.forEach(h => html += `<th>${h}</th>`);
  html += '</tr></thead><tbody>';
  rows.forEach(row => {
    html += '<tr>';
    row.forEach(cell => html += `<td>${cell === null ? 'NULL' : escapeHtml(cell)}</td>`);
    html += '</tr>';
  });
  html += '</tbody></table>';
  return html;
}

function escapeHtml(str) {
  if (str === null) return 'NULL';
  return String(str)
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}

function lesson(title, explanation, examples) {
  return `
    <h1 class="content-title">${title}</h1>
    <p class="lesson-text">${explanation}</p>
    ${examples.map(ex => `
      <div class="example-block">
        <p class="lesson-text">üìå <code>${escapeHtml(ex.query)}</code></p>
        <div class="output-table">${ex.output}</div>
      </div>
    `).join('')}
  `;
}

/* -------------------------
   Sample data will be used to build outputs
   ------------------------- */
const TOYS_ROWS = [
  [1, 'Car', 'Red', 'Car', 200],
  [2, 'Train', 'Blue', 'Train', 150],
  [3, 'Ball', 'Green', 'Ball', 50],
  [4, 'Puzzle', 'Red', 'Puzzle', 300],
  [5, 'Doll', 'Pink', 'Doll', 100]
];

const CUSTOMERS_ROWS = [
  [1, 'Sahil', 'Pune'],
  [2, 'Anita', 'Mumbai'],
  [3, 'Ravi', 'Delhi']
];

const ORDERS_ROWS = [
  [101, 1, 1],
  [102, 1, 3],
  [103, 2, 2]
];

const STUDENTS_ROWS = [
  [1, 'Asha'],
  [2, 'Vikram'],
  [3, 'Neha']
];

const SPORTS_ROWS = [
  ['Vikram'],
  ['Rahul'],
  ['Asha']
];

/* prebuilt HTML table snippets (for brief reuse) */
const TOYS_TABLE = makeTable(['ID', 'Name', 'Color', 'Type', 'Price'], TOYS_ROWS);
const CUSTOMERS_TABLE = makeTable(['ID','Name','City'], CUSTOMERS_ROWS);
const ORDERS_TABLE = makeTable(['OrderID','CustomerID','ToyID'], ORDERS_ROWS);
const STUDENTS_TABLE = makeTable(['ID','Name'], STUDENTS_ROWS);
const SPORTS_TABLE = makeTable(['Name'], SPORTS_ROWS);

/* -------------------------
   Language click handling
   ------------------------- */
document.querySelectorAll('.btn[data-lang]').forEach(btn => {
  btn.addEventListener('click', e => {
    e.preventDefault();
    const lang = btn.dataset.lang;
    document.querySelector('.lang-name').textContent = langNames[lang] || "ENGLISH";
    document.getElementById('landing').classList.add('hide');
    const app = document.getElementById('app');
    app.removeAttribute('aria-hidden');
    app.classList.add('show');
    window.scrollTo(0, 0);
  });
});

/* -------------------------
   Topic click handler ‚Äî all lessons
   ------------------------- */
document.getElementById('topicList').addEventListener('click', e => {
  if (!(e.target && e.target.tagName === 'LI')) return;
  const topic = e.target.textContent.trim();
  let contentHTML = '';

  /* SELECT */
  if (topic === "SELECT Statement") {
    contentHTML = lesson(
      "SELECT Statement",
      "üë∂ SELECT ‡§Æ‡•ç‡§π‡§£‡§ú‡•á SQL ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§ï‡•Ä '‡§Æ‡§≤‡§æ ‡§ï‡•Å‡§†‡§≤‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§™‡§æ‡§π‡§ø‡§ú‡•á?' ‚Äî ‡§ú‡§∏‡•á ‡§§‡•Å‡§≤‡§æ ‡§´‡§ï‡•ç‡§§ ‡§ñ‡•á‡§≥‡§£‡•Ä‡§ö‡•Ä ‡§®‡§æ‡§µ‡§Ç ‡§π‡§µ‡•Ä ‡§Ü‡§π‡•á‡§§ ‡§§‡§∞ SELECT ‡§µ‡§æ‡§™‡§∞‡§§‡•ã. SELECT * ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§∏‡§ó‡§≥‡§Ç ‡§¶‡§æ‡§ñ‡§µ, SELECT Name ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§´‡§ï‡•ç‡§§ ‡§®‡§æ‡§µ ‡§¶‡§æ‡§ñ‡§µ.",
      [
        { query: "SELECT * FROM Toys;", output: TOYS_TABLE },
        { query: "SELECT Name, Price FROM Toys;", output: makeTable(['Name','Price'], TOYS_ROWS.map(r => [r[1], r[4]])) }
      ]
    );
  }

  /* WHERE */
  else if (topic === "WHERE Clause") {
    contentHTML = lesson(
      "WHERE Clause",
      "üë∂ WHERE ‡§Æ‡•ç‡§π‡§£‡§ú‡•á '‡§Ö‡§ü ‡§≤‡§æ‡§µ‡§£‡•á' ‚Äî ‡§´‡§ï‡•ç‡§§ ‡§§‡•Ä ‡§®‡•ã‡§Ç‡§¶‡•Ä ‡§¶‡§æ‡§ñ‡§µ‡§æ ‡§ú‡•ç‡§Ø‡§æ ‡§è‡§ï‡§æ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§Ö‡§ü‡•Ä‡§≤‡§æ ‡§≤‡§æ‡§ó‡§§‡§æ‡§§ (‡§â‡§¶‡§æ., ‡§≤‡§æ‡§≤ ‡§ñ‡•á‡§≥‡§£‡•Ä, ‡§ï‡§ø‡§Ç‡§Æ‡§§ ‡§Æ‡•ã‡§†‡•Ä ‡§Ö‡§∏‡§≤‡•á‡§≤‡•Ä).",
      [
        { query: "SELECT * FROM Toys WHERE Color = 'Red';",
          output: makeTable(['ID','Name','Color','Price'], TOYS_ROWS.filter(r => r[2]==='Red').map(r => [r[0], r[1], r[2], r[4]]))
        },
        { query: "SELECT Name FROM Toys WHERE Price > 150;",
          output: makeTable(['Name','Price'], TOYS_ROWS.filter(r => r[4] > 150).map(r => [r[1], r[4]]))
        }
      ]
    );
  }

  /* ORDER BY */
  else if (topic === "ORDER BY") {
    contentHTML = lesson(
      "ORDER BY",
      "üë∂ ORDER BY ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® ‡§Ü‡§™‡§≤‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§ï‡•ç‡§∞‡§Æ‡§¨‡§¶‡•ç‡§ß ‡§ï‡§∞‡§§‡•ã ‚Äî ‡§®‡§æ‡§µ‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ A‚ÜíZ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ï‡§ø‡§Æ‡§§‡•Ä‡§®‡•Å‡§∏‡§æ‡§∞ ‡§µ‡§∞‡•Ç‡§® ‡§ñ‡§æ‡§≤‡•Ä (DESC) ‡§á. ‡§ú‡§∏‡•á ‡§ñ‡•á‡§≥‡§£‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ ‡§∏‡•Å‡§¨‡§ï ‡§∞‡§æ‡§Ç‡§ó‡•á‡§§ ‡§≤‡§æ‡§µ‡§£‡•á.",
      [
        { query: "SELECT * FROM Toys ORDER BY Name ASC;",
          output: makeTable(['ID','Name'], TOYS_ROWS.slice().sort((a,b)=> a[1].localeCompare(b[1])).map(r=>[r[0], r[1]]))
        },
        { query: "SELECT * FROM Toys ORDER BY Price DESC;",
          output: makeTable(['Name','Price'], TOYS_ROWS.slice().sort((a,b)=> b[4]-a[4]).map(r=>[r[1], r[4]]))
        }
      ]
    );
  }

  /* AND */
  else if (topic === "AND") {
    contentHTML = lesson(
      "AND",
      "üë∂ AND ‡§Æ‡•ç‡§π‡§£‡§ú‡•á '‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§Ö‡§ü‡•Ä ‡§ñ‡§∞‡•ç‡§Ø‡§æ ‡§Ö‡§∏‡§æ‡§Ø‡§≤‡§æ ‡§π‡§µ‡•ç‡§Ø‡§æ‡§§' ‚Äî ‡§ú‡§∏‡•á ‡§≤‡§æ‡§≤ ‡§Ü‡§£‡§ø Car ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§π‡§µ‡•á ‡§Ö‡§∏‡§≤‡•á ‡§™‡§æ‡§π‡§ø‡§ú‡•á.",
      [
        { query: "SELECT * FROM Toys WHERE Color='Red' AND Type='Car';",
          output: makeTable(['ID','Name','Color','Type'], TOYS_ROWS.filter(r=> r[2]==='Red' && r[3]==='Car').map(r=>[r[0],r[1],r[2],r[3]]))
        },
        { query: "SELECT * FROM Toys WHERE Price>100 AND Color='Blue';",
          output: makeTable(['ID','Name','Price','Color'], TOYS_ROWS.filter(r=> r[4]>100 && r[2]==='Blue').map(r=>[r[0],r[1],r[4],r[2]]))
        }
      ]
    );
  }

  /* OR */
  else if (topic === "OR") {
    contentHTML = lesson(
      "OR",
      "üë∂ OR ‡§Æ‡•ç‡§π‡§£‡§ú‡•á '‡§ï‡§ø‡§Ç‡§µ‡§æ' ‚Äî ‡§ú‡§∞‡•Ä ‡§è‡§ï ‡§Ö‡§ü ‡§ñ‡§∞‡•Ä ‡§Ö‡§∏‡§≤‡•Ä ‡§§‡§∞‡•Ä ‡§ö‡§æ‡§≤‡§§‡•á. (‡§â‡§¶‡§æ., ‡§≤‡§æ‡§≤ ‡§ï‡§ø‡§Ç‡§µ‡§æ Car).",
      [
        { query: "SELECT * FROM Toys WHERE Color='Red' OR Type='Car';",
          output: makeTable(['ID','Name','Color','Type'],
            TOYS_ROWS.filter(r=> r[2]==='Red' || r[3]==='Car').map(r=>[r[0],r[1],r[2],r[3]]))
        },
        { query: "SELECT * FROM Toys WHERE Price<100 OR Color='Green';",
          output: makeTable(['Name','Price','Color'],
            TOYS_ROWS.filter(r=> r[4]<100 || r[2]==='Green').map(r=>[r[1], r[4], r[2]]))
        }
      ]
    );
  }

  /* LIKE */
  else if (topic === "LIKE") {
    contentHTML = lesson(
      "LIKE",
      "üë∂ LIKE ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® ‡§Ü‡§™‡§£ ‡§®‡§æ‡§µ‡§æ‡§ö‡§æ ‡§™‡•Ö‡§ü‡§∞‡•ç‡§® ‡§∂‡•ã‡§ß‡§§‡•ã. '%' ‡§Æ‡•ç‡§π‡§£‡§ú‡•á '‡§ï‡§æ‡§π‡•Ä‡§π‡•Ä ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•á'. ‡§â‡§¶‡§æ., 'C%' ‡§Æ‡•ç‡§π‡§£‡§ú‡•á 'C' ‡§®‡•á ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§£‡§æ‡§∞‡•á.",
      [
        { query: "SELECT * FROM Toys WHERE Name LIKE 'C%';",
          output: makeTable(['ID','Name'], TOYS_ROWS.filter(r=> r[1].startsWith('C')).map(r=>[r[0], r[1]]))
        },
        { query: "SELECT * FROM Toys WHERE Name LIKE '%l';",
          output: makeTable(['ID','Name'], TOYS_ROWS.filter(r=> r[1].endsWith('l')).map(r=>[r[0], r[1]]))
        }
      ]
    );
  }

  /* IN */
  else if (topic === "IN") {
    contentHTML = lesson(
      "IN",
      "üë∂ IN ‡§Æ‡•ç‡§π‡§£‡§ú‡•á '‡§§‡•ç‡§Ø‡§æ‡§§‡§≤‡§æ ‡§Ü‡§π‡•á ‡§ï‡§æ?' ‚Äî ‡§è‡§ï‡§æ‡§ö ‡§µ‡•á‡§≥‡•Ä ‡§Ö‡§®‡•á‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•á ‡§§‡§™‡§æ‡§∏‡§§‡§æ ‡§Ø‡•á‡§§‡§æ‡§§.",
      [
        { query: "SELECT * FROM Toys WHERE Color IN ('Red','Blue');",
          output: makeTable(['ID','Name','Color'], TOYS_ROWS.filter(r=> ['Red','Blue'].includes(r[2])).map(r=>[r[0], r[1], r[2]]))
        },
        { query: "SELECT Name FROM Toys WHERE Type IN ('Car','Ball');",
          output: makeTable(['Name'], TOYS_ROWS.filter(r=> ['Car','Ball'].includes(r[3])).map(r=>[r[1]]))
        }
      ]
    );
  }

  /* BETWEEN */
  else if (topic === "BETWEEN") {
    contentHTML = lesson(
      "BETWEEN",
      "üë∂ BETWEEN ‡§Æ‡•ç‡§π‡§£‡§ú‡•á '‡§¶‡§∞‡§Æ‡•ç‡§Ø‡§æ‡§®' ‚Äî ‡§¶‡•ã‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§ß‡§≤‡•ç‡§Ø‡§æ ‡§®‡•ã‡§Ç‡§¶‡•Ä (‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§¨‡§æ‡§ú‡•Ç ‡§∏‡§Æ‡§æ‡§µ‡§ø‡§∑‡•ç‡§ü).",
      [
        { query: "SELECT * FROM Toys WHERE Price BETWEEN 100 AND 250;",
          output: makeTable(['ID','Name','Price'], TOYS_ROWS.filter(r=> r[4]>=100 && r[4]<=250).map(r=>[r[0], r[1], r[4]]))
        },
        { query: "SELECT Name FROM Toys WHERE Price BETWEEN 50 AND 150;",
          output: makeTable(['Name'], TOYS_ROWS.filter(r=> r[4]>=50 && r[4]<=150).map(r=>[r[1]]))
        }
      ]
    );
  }

  /* ANY and ALL */
  else if (topic === "ANY and ALL") {
    contentHTML = lesson(
      "ANY and ALL",
      "üë∂ ANY ‡§Æ‡•ç‡§π‡§£‡§ú‡•á '‡§Ø‡§æ‡§¶‡•Ä‡§§‡•Ä‡§≤ ‡§ï‡•ã‡§£‡§§‡•á‡§π‡•Ä ‡§è‡§ï' ‡§™‡•Å‡§∞‡•á‡§∏‡•á ‡§Ü‡§π‡•á; ALL ‡§Æ‡•ç‡§π‡§£‡§ú‡•á '‡§∏‡§∞‡•ç‡§µ‡§æ‡§Ç‡§™‡•á‡§ï‡•ç‡§∑‡§æ' ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§§‡•Å‡§≤‡§®‡§æ ‡§π‡•ã‡§§‡•á. (‡§π‡•á subquery/array ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§æ‡§§ ‡§ï‡§æ‡§Æ‡•Ä ‡§Ø‡•á‡§§‡•á).",
      [
        { query: "SELECT * FROM Toys WHERE Price > ANY (100,200);",
          output: makeTable(['Name','Price'], TOYS_ROWS.filter(r=> r[4] > 100).map(r=>[r[1], r[4]]))
        },
        { query: "SELECT * FROM Toys WHERE Price > ALL (50,100);",
          output: makeTable(['Name','Price'], TOYS_ROWS.filter(r=> r[4] > 100).map(r=>[r[1], r[4]]))
        }
      ]
    );
  }

  /* UNION */
  else if (topic === "UNION") {
    contentHTML = lesson(
      "UNION",
      "üë∂ UNION ‡§¶‡•ã‡§® SELECT ‡§ö‡§æ ‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•ã ‡§Ü‡§£‡§ø duplicate ‡§ï‡§æ‡§¢‡•Ç‡§® ‡§ü‡§æ‡§ï‡§§‡•ã ‚Äî ‡§Æ‡•ç‡§π‡§£‡§ú‡•á unique ‡§®‡•ã‡§Ç‡§¶‡•Ä ‡§™‡§∞‡§§.",
      [
        { query: "SELECT Name FROM Students UNION SELECT Name FROM Sports;",
          output: makeTable(['Name'], Array.from(new Set(STUDENTS_ROWS.map(r=>r[1]).concat(SPORTS_ROWS.map(r=>r[0])))).map(n=>[n]))
        },
        { query: "SELECT Color FROM Toys UNION SELECT Color FROM Gifts;",
          output: makeTable(['Color'], Array.from(new Set(TOYS_ROWS.map(r=>r[2]).concat(['Purple','Red']))).map(c=>[c]))
        }
      ]
    );
  }

  /* UNION ALL */
  else if (topic === "UNION ALL") {
    contentHTML = lesson(
      "UNION ALL",
      "üë∂ UNION ALL ‡§è‡§ï‡§§‡•ç‡§∞ ‡§ï‡§∞‡§§‡•á ‡§™‡§∞‡§Ç‡§§‡•Å duplicates ‡§†‡•á‡§µ‡§§‡•á ‚Äî ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§∏‡§∞‡•ç‡§µ ‡§®‡•ã‡§Ç‡§¶‡•Ä ‡§ú‡§∂‡•ç‡§Ø‡§æ ‡§Ü‡§π‡•á‡§§ ‡§§‡§∂‡§æ ‡§™‡§∞‡§§ ‡§Ø‡•á‡§§‡§æ‡§§.",
      [
        { query: "SELECT Name FROM Students UNION ALL SELECT Name FROM Sports;",
          output: makeTable(['Name'], STUDENTS_ROWS.map(r=>[r[1]]).concat(SPORTS_ROWS.map(r=>[r[0]])))
        },
        { query: "SELECT Color FROM Toys UNION ALL SELECT Color FROM Gifts;",
          output: makeTable(['Color'], TOYS_ROWS.map(r=>[r[2]]).concat([['Red']]))
        }
      ]
    );
  }

  /* INTERSECT */
  else if (topic === "INTERSECT") {
    contentHTML = lesson(
      "INTERSECT",
      "üë∂ INTERSECT ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä lists ‡§Æ‡§ß‡•Ä‡§≤ common items ‡§™‡§∞‡§§ ‡§ï‡§∞‡§§‡•ã ‚Äî ‡§Æ‡•ç‡§π‡§£‡§ú‡•á common ‡§≠‡§æ‡§ó.",
      [
        { query: "SELECT Name FROM Students INTERSECT SELECT Name FROM Sports;",
          output: makeTable(['Name'], STUDENTS_ROWS.map(r=>r[1]).filter(n => SPORTS_ROWS.some(s=> s[0]===n)).map(n=>[n]))
        },
        { query: "SELECT Color FROM Toys INTERSECT SELECT Color FROM Gifts;",
          output: makeTable(['Color'], ['Red'].map(c=>[c]))
        }
      ]
    );
  }

  /* MINUS */
  else if (topic === "MINUS") {
    contentHTML = lesson(
      "MINUS",
      "üë∂ MINUS ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§™‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ ‡§Ø‡§æ‡§¶‡•Ä‡§§‡•Ä‡§≤ ‡§ú‡•á items ‡§¶‡•Å‡§∏‡§±‡•ç‡§Ø‡§æ ‡§Ø‡§æ‡§¶‡•Ä‡§§ ‡§®‡§æ‡§π‡•Ä‡§§ ‡§§‡•á ‡§™‡§∞‡§§ ‡§ï‡§∞‡§£‡•á.",
      [
        { query: "SELECT Name FROM Toys MINUS SELECT Name FROM BrokenToys;",
          output: makeTable(['Name'], TOYS_ROWS.map(r=>[r[1]])) // simplified example: show toys (pretend BrokenToys empty)
        },
        { query: "SELECT Color FROM Toys MINUS SELECT Color FROM Gifts;",
          output: makeTable(['Color'], TOYS_ROWS.map(r=>[r[2]]).filter((v,i,self)=> self.indexOf(v)===i)) // unique toy colors
        }
      ]
    );
  }

  /* NOT */
  else if (topic === "NOT") {
    contentHTML = lesson(
      "NOT",
      "üë∂ NOT ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§Ö‡§ü ‡§â‡§≤‡§ü ‡§ï‡§∞‡§£‡•á ‚Äî ‡§ú‡§ø‡§•‡•á ‡§Ö‡§ü ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã‡§§ ‡§®‡§æ‡§π‡•Ä ‡§§‡§ø‡§•‡§≤‡•ç‡§Ø‡§æ ‡§®‡•ã‡§Ç‡§¶‡•Ä ‡§™‡§∞‡§§ ‡§ï‡§∞‡§æ.",
      [
        { query: "SELECT * FROM Toys WHERE NOT Color='Red';",
          output: makeTable(['ID','Name','Color'], TOYS_ROWS.filter(r=> r[2] !== 'Red').map(r=>[r[0], r[1], r[2]]))
        },
        { query: "SELECT Name FROM Toys WHERE NOT Price>200;",
          output: makeTable(['Name'], TOYS_ROWS.filter(r=> r[4] <= 200).map(r=>[r[1]]))
        }
      ]
    );
  }

  /* EXISTS */
  else if (topic === "EXISTS") {
    contentHTML = lesson(
      "EXISTS",
      "üë∂ EXISTS ‡§§‡§™‡§æ‡§∏‡§§‡•ã ‡§ï‡•Ä ‡§¶‡•Å‡§∏‡§±‡•ç‡§Ø‡§æ ‡§ü‡•á‡§¨‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§®‡•ã‡§Ç‡§¶ ‡§Ü‡§π‡•á ‡§ï‡§æ ‚Äî ‡§â‡§¶‡§æ., ‡§è‡§ñ‡§æ‡§¶‡•ç‡§Ø‡§æ customer ‡§®‡•á order ‡§¶‡§ø‡§≤‡§æ‡§Ø ‡§ï‡•Ä ‡§®‡§æ‡§π‡•Ä.",
      [
        { query: "SELECT Name FROM Customers c WHERE EXISTS (SELECT 1 FROM Orders o WHERE o.CustomerID = c.ID);",
          output: makeTable(['Name'], CUSTOMERS_ROWS.filter(c => ORDERS_ROWS.some(o=> o[1] === c[0])).map(c=>[c[1]]))
        },
        { query: "SELECT * FROM Toys t WHERE EXISTS (SELECT 1 FROM Orders o WHERE o.ToyID = t.ID);",
          output: makeTable(['ID','Name'], TOYS_ROWS.filter(t=> ORDERS_ROWS.some(o=> o[2] === t[0])).map(t=>[t[0],t[1]]))
        }
      ]
    );
  }

  /* NOT EXISTS */
  else if (topic === "NOT EXISTS") {
    contentHTML = lesson(
      "NOT EXISTS",
      "üë∂ NOT EXISTS ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§¶‡•Å‡§∏‡§±‡•ç‡§Ø‡§æ ‡§ü‡•á‡§¨‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡•Å‡§≥‡§£‡§æ‡§∞‡•Ä ‡§®‡•ã‡§Ç‡§¶ ‡§®‡§æ‡§π‡•Ä ‚Äî ‡§ú‡§∂‡•Ä ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡§æ‡§®‡•á ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¶‡§ø‡§≤‡•á‡§≤‡•Ä ‡§®‡§æ‡§π‡•Ä.",
      [
        { query: "SELECT Name FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Orders o WHERE o.CustomerID = c.ID);",
          output: makeTable(['Name'], CUSTOMERS_ROWS.filter(c => !ORDERS_ROWS.some(o=> o[1] === c[0])).map(c=>[c[1]]))
        },
        { query: "SELECT * FROM Toys t WHERE NOT EXISTS (SELECT 1 FROM Orders o WHERE o.ToyID = t.ID);",
          output: makeTable(['ID','Name'], TOYS_ROWS.filter(t=> !ORDERS_ROWS.some(o=> o[2] === t[0])).map(t=>[t[0], t[1]]))
        }
      ]
    );
  }

  /* NULL Values */
  else if (topic === "NULL Values") {
    contentHTML = lesson(
      "NULL Values",
      "üë∂ NULL ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä ‚Äî ‡§ï‡§æ‡§π‡•Ä cell ‡§∞‡§ø‡§ï‡§æ‡§Æ‡•Ä (unknown). IS NULL ‡§Ü‡§£‡§ø IS NOT NULL ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® ‡§∂‡•ã‡§ß‡§§‡§æ ‡§Ø‡•á‡§§‡•á.",
      [
        { query: "SELECT * FROM Toys WHERE Price IS NULL;",
          output: makeTable(['ID','Name','Price'], [[6, 'Robot', null]]) // example showing a NULL row
        },
        { query: "SELECT Name FROM Customers WHERE Phone IS NULL;",
          output: makeTable(['Name'], [['Ravi']])
        }
      ]
    );
  }

  /* INSERT INTO */
  else if (topic === "INSERT INTO") {
    contentHTML = lesson(
      "INSERT INTO",
      "üë∂ INSERT ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§®‡§µ‡•Ä‡§® row ‡§ü‡•á‡§¨‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ò‡§æ‡§≤‡§£‡•á ‚Äî ‡§ú‡§∏‡•á ‡§®‡§µ‡•Ä‡§® ‡§ñ‡•á‡§≥‡§£‡•Ä ‡§¨‡•â‡§ï‡•ç‡§∏‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§†‡•á‡§µ‡§£‡•á. Before/After ‡§¶‡§æ‡§ñ‡§µ‡§§‡•ã.",
      [
        {
          query: "INSERT INTO Toys (ID,Name,Color,Type,Price) VALUES (6,'Robot','Silver','Robot',400);",
          output: `<div class="output-caption"><strong>Before:</strong></div>${TOYS_TABLE}
                   <div class="output-caption"><strong>After:</strong></div>
                   ${makeTable(['ID','Name','Color','Type','Price'], TOYS_ROWS.concat([[6,'Robot','Silver','Robot',400]]))}`
        },
        {
          query: "INSERT INTO Customers (ID,Name,City) VALUES (4,'Priya','Pune');",
          output: `<div class="output-caption"><strong>Before:</strong></div>${CUSTOMERS_TABLE}
                   <div class="output-caption"><strong>After:</strong></div>
                   ${makeTable(['ID','Name','City'], CUSTOMERS_ROWS.concat([[4,'Priya','Pune']]))}`
        }
      ]
    );
  }

  /* UPDATE */
  else if (topic === "UPDATE") {
    contentHTML = lesson(
      "UPDATE",
      "üë∂ UPDATE ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§Ü‡§ß‡•Ä‡§ö ‡§Ö‡§∏‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ row ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§¨‡§¶‡§≤‡§£‡•á ‚Äî ‡§ú‡§∏‡•á ‡§ñ‡•á‡§≥‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§∞‡§Ç‡§ó ‡§¨‡§¶‡§≤‡§≤‡§æ ‡§§‡§∞ ‡§§‡•ã ‡§¨‡§¶‡§≤ ‡§®‡•ã‡§Ç‡§¶‡•Ä‡§§ ‡§ï‡§∞‡§§‡§æ ‡§Ø‡•á‡§§‡•ã.",
      [
        {
          query: "UPDATE Toys SET Color='Blue' WHERE Name='Car';",
          output: `<div class="output-caption"><strong>Before:</strong></div>${TOYS_TABLE}
                   <div class="output-caption"><strong>After:</strong></div>
                   ${makeTable(['ID','Name','Color'], TOYS_ROWS.map(r => r[1] === 'Car' ? [r[0], r[1], 'Blue'] : [r[0], r[1], r[2]]))}`
        },
        {
          query: "UPDATE Customers SET City='Mumbai' WHERE Name='Sahil';",
          output: `<div class="output-caption"><strong>Before:</strong></div>${CUSTOMERS_TABLE}
                   <div class="output-caption"><strong>After:</strong></div>
                   ${makeTable(['ID','Name','City'], CUSTOMERS_ROWS.map(c => c[1] === 'Sahil' ? [c[0], c[1], 'Mumbai'] : c))}`
        }
      ]
    );
  }

  /* DELETE */
  else if (topic === "DELETE") {
    contentHTML = lesson(
      "DELETE",
      "üë∂ DELETE ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§è‡§ñ‡§æ‡§¶‡•Ä row ‡§ï‡§æ‡§¢‡•Ç‡§® ‡§ü‡§æ‡§ï‡§£‡•á ‚Äî ‡§ú‡§∂‡•Ä ‡§ñ‡§∞‡§æ‡§¨ ‡§ù‡§æ‡§≤‡•á‡§≤‡•Ä ‡§ñ‡•á‡§≥‡§£‡•Ä ‡§ï‡§æ‡§¢‡•Ç‡§® ‡§ü‡§æ‡§ï‡§§‡•ã.",
      [
        {
          query: "DELETE FROM Toys WHERE Name='Car';",
          output: `<div class="output-caption"><strong>Before:</strong></div>${TOYS_TABLE}
                   <div class="output-caption"><strong>After:</strong></div>
                   ${makeTable(['ID','Name'], TOYS_ROWS.filter(r => r[1] !== 'Car').map(r=>[r[0], r[1]]))}`
        },
        {
          query: "DELETE FROM Customers WHERE City='Delhi';",
          output: `<div class="output-caption"><strong>Before:</strong></div>${CUSTOMERS_TABLE}
                   <div class="output-caption"><strong>After:</strong></div>
                   ${makeTable(['ID','Name','City'], CUSTOMERS_ROWS.filter(c=> c[2] !== 'Delhi'))}`
        }
      ]
    );
  }

  /* fallback */
  else {
    contentHTML = lesson(topic, "‡§π‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§≤‡§µ‡§ï‡§∞‡§ö ‡§≠‡§∞‡§≤‡•Ä ‡§ú‡§æ‡§à‡§≤.", [
      { query: `-- Example for ${topic}`, output: `<p class="lesson-text">‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§≤‡§µ‡§ï‡§∞ ‡§Ø‡•á‡§à‡§≤.</p>` },
      { query: `-- Another example for ${topic}`, output: `<p class="lesson-text">‡§â‡§¶‡§æ‡§π‡§∞‡§£ 2 ‡§≤‡§µ‡§ï‡§∞ ‡§Ø‡•á‡§à‡§≤.</p>` }
    ]);
  }

  document.getElementById('contentArea').innerHTML = contentHTML;
  document.querySelectorAll('#topicList li').forEach(li => li.classList.remove('active'));
  e.target.classList.add('active');
});
